/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/products/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * list
         * @description #### Controller:
         *
         *     `product-database-api/internal/product.(*Handler).List`
         *
         *     #### Middlewares:
         *
         *     - `github.com/go-fuego/fuego.defaultLogger.middleware`
         *
         *     ---
         *
         *
         */
        get: operations["GET_/products/"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description HTTPError schema */
        HTTPError: {
            /** @description Human readable error message */
            detail?: string | null;
            errors?: {
                /** @description Additional information about the error */
                more?: {
                    [key: string]: unknown;
                } | null;
                /** @description For example, name of the parameter that caused the error */
                name?: string;
                /** @description Human readable error message */
                reason?: string;
            }[] | null;
            instance?: string | null;
            /**
             * @description HTTP status code
             * @example 403
             */
            status?: number | null;
            /** @description Short title of the error */
            title?: string | null;
            /** @description URL of the error type. Can be used to lookup the error in a documentation */
            type?: string | null;
        };
        /** @description PagedResponseDTO schema */
        PagedResponseDTO: {
            items?: {
                /** @example Product Name */
                name?: string;
            }[];
            /** @example 1 */
            page?: number;
            /** @example 20 */
            pageSize?: number;
            /**
             * Format: int64
             * @example 357
             */
            total?: number;
        };
        /** @description unknown-interface schema */
        "unknown-interface": unknown;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "GET_/products/": {
        parameters: {
            query?: never;
            header?: {
                Accept?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PagedResponseDTO"];
                    "application/xml": components["schemas"]["PagedResponseDTO"];
                };
            };
            /** @description Bad Request _(validation or deserialization error)_ */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            /** @description Internal Server Error _(panics)_ */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPError"];
                    "application/xml": components["schemas"]["HTTPError"];
                };
            };
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
